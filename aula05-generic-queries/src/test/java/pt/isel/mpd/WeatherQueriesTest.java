/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pt.isel.mpd;

import org.junit.Assert;
import org.junit.Test;
import pt.isel.mpd.util.MockRequest;
import pt.isel.mpd.weather.WeatherInfo;
import pt.isel.mpd.weather.WeatherPredicate;
import pt.isel.mpd.weather.WeatherQueries;
import pt.isel.mpd.weather.WeatherWebApi;

import java.time.LocalDate;
import java.util.List;

public class WeatherQueriesTest {
    final List<WeatherInfo> jan;

    public WeatherQueriesTest() {
        WeatherWebApi api = new WeatherWebApi(new MockRequest());
        jan = api.pastWeather(37.017, -7.933, LocalDate.of(2020, 1, 1), LocalDate.of(2020, 1, 30));
    }

    @Test public void testFilterCloudyDays() {
        Iterable<WeatherInfo> cloud = WeatherQueries
            // .filter(jan, info -> info.desc.toLowerCase().contains("cloud"));
            .filter(jan, WeatherQueriesTest::cloudyDays);
        int count = 0;
        for (var info: cloud) { count++; }
        Assert.assertEquals(14, count);
    }

    static boolean cloudyDays(WeatherInfo info) {
        return info.desc.toLowerCase().contains("cloud");
    }

    @Test public void testFilterWithRainnyDaysPredicate() {
        Iterable<WeatherInfo> rainny = WeatherQueries.filter(jan, new RainnyDays());
        int count = 0;
        for (var info: rainny) { count++; }
        Assert.assertEquals(11, count);
    }

    @Test public void testFilterWithWarmDaysPredicate() {
        Iterable<WeatherInfo> warm = WeatherQueries.filter(jan, new WarmDays());
        int count = 0;
        for (var info: warm) { count++; }
        Assert.assertEquals(27, count);
    }

    private class RainnyDays implements WeatherPredicate {
        @Override
        public boolean test(WeatherInfo info) {
            return info.precipMM != 0;
        }
    }

    private class WarmDays implements WeatherPredicate {
        @Override
        public boolean test(WeatherInfo info) {
            return info.tempC >= 14;
        }
    }
}
