/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pt.isel.mpd;

import org.junit.Test;
import pt.isel.mpd.util.AbstractRequest;
import pt.isel.mpd.util.HttpRequest;
import pt.isel.mpd.weather.WeatherWebApi;
import pt.isel.mpd.weather.dto.WeatherInfo;

import java.io.InputStream;
import java.time.LocalDate;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Supplier;
import java.util.stream.Stream;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class WeatherWebApiTest {
    static class RequestMediator extends AbstractRequest{
        private AbstractRequest req;
        int count;
        public RequestMediator(AbstractRequest req ) {
            this.req = req;
        }
        public InputStream getStream(String path) {
            count++;
            return req.getStream(path);
        }
    }
    @Test public void testPastWeather() {
        RequestMediator req = new RequestMediator(new HttpRequest());
        WeatherWebApi api = new WeatherWebApi(req);
        Stream<WeatherInfo> jan = api.pastWeather(37.017, -7.933, LocalDate.of(2020, 1, 1), LocalDate.of(2020, 1, 30));
        assertEquals(1, req.count); // => !!!! EAGER => Fix this !!!
        Stream<Integer> tempsJan = jan.map(wi -> wi.getTempC());
        assertEquals(1, req.count); // => !!!! should be ZERO
        int max = tempsJan.max(Integer::compare).get();
        assertEquals(1, req.count); // Terminal Operation consumes pipeline
        assertEquals(17, max);
    }

    @Test public void testExternalvsInternalIteration() {
        WeatherWebApi api = new WeatherWebApi(new HttpRequest());
        Supplier<Stream<WeatherInfo>> jan = () -> api.pastWeather(37.017, -7.933, LocalDate.of(2020, 1, 1), LocalDate.of(2020, 1, 30));
        Iterator<WeatherInfo> iter = jan.get().iterator();
        /**
         * External Iteration => ASK => next() -> T
         */
        if(iter.hasNext()) assertEquals(14, iter.next().getTempC());
        else assertTrue(false);
        assertEquals(15, iter.next().getTempC());
        /**
         * Internal Iteration => TELL  =>
         */
        Spliterator<WeatherInfo> spliterator = jan.get().spliterator();
        if(!spliterator.tryAdvance(w -> assertEquals(14, w.getTempC())))
            assertTrue(false);
        spliterator.tryAdvance(w -> assertEquals(15, w.getTempC()));

    }

    // TPC: Add unit test for search() of WeatherWebApi
}
